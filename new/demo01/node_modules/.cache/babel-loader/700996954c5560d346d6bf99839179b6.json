{"ast":null,"code":"import { INPUT_NAME_VALUE, INPUT_GENDER_ITEM, INPUT_AGE_ITEM, INPUT_HOBBY_ITEM } from \"./actionTypes\";\nvar defaultState = {\n  inputNameValue: \"\",\n  inputGenderValue: \"\",\n  inputAgeValue: \"\",\n  inputHobbyValue: \"\",\n  list: [{\n    name: \"Jerry\",\n    gender: \"男\",\n    age: 20,\n    hobby: \"篮球\"\n  }, {\n    name: \"Neil\",\n    gender: \"男\",\n    age: 22,\n    hobby: \"跑步\"\n  }]\n}; //reducer能够接受state，但是绝不能修改state,所以需要拷贝成\n//纯函数指的是，给定固定的输入就一定会有固定的输出，而且不会有任何副作用\n\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === INPUT_NAME_VALUE) {\n    var newState = JSON.parse(JSON.stringify(state));\n    newState.inputNameValue = action.value;\n    return newState; //newState实际返回给了store\n    // const newState = JSON.parse(JSON.stringify(state));\n    // newState.list.push(newState.inputNameValue );\n    // newState.inputNameValue =\"\";\n    // // console.log(newState)\n    // return newState;    //newState实际返回给了store\n  }\n\n  if (action.type === INPUT_GENDER_ITEM) {\n    var _newState = JSON.parse(JSON.stringify(state));\n\n    _newState.inputGenderValue = action.value;\n    return _newState; //newState实际返回给了store\n  }\n\n  if (action.type === INPUT_AGE_ITEM) {\n    var _newState2 = JSON.parse(JSON.stringify(state));\n\n    _newState2.inputAgeValue = action.value;\n    return _newState2; //newState实际返回给了store\n  }\n\n  if (action.type === INPUT_HOBBY_ITEM) {\n    var _newState3 = JSON.parse(JSON.stringify(state));\n\n    _newState3.inputHobbyValue = action.value;\n    return _newState3; //newState实际返回给了store\n  } // console.log(state,action)\n\n\n  return state; //state里面存放的是所有store仓库里所有数据\n});","map":{"version":3,"sources":["/Users/xinglingling/xlin/codetest/project02/new/demo01/src/store/reducer.js"],"names":["INPUT_NAME_VALUE","INPUT_GENDER_ITEM","INPUT_AGE_ITEM","INPUT_HOBBY_ITEM","defaultState","inputNameValue","inputGenderValue","inputAgeValue","inputHobbyValue","list","name","gender","age","hobby","state","action","type","newState","JSON","parse","stringify","value"],"mappings":"AAAA,SAAQA,gBAAR,EAAyBC,iBAAzB,EAA2CC,cAA3C,EAA0DC,gBAA1D,QAAiF,eAAjF;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,cAAc,EAAE,EADG;AAEnBC,EAAAA,gBAAgB,EAAE,EAFC;AAGnBC,EAAAA,aAAa,EAAE,EAHI;AAInBC,EAAAA,eAAe,EAAE,EAJE;AAKnBC,EAAAA,IAAI,EAAE,CACJ;AACEC,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,MAAM,EAAE,GAFV;AAGEC,IAAAA,GAAG,EAAE,EAHP;AAIEC,IAAAA,KAAK,EAAE;AAJT,GADI,EAOJ;AACEH,IAAAA,IAAI,EAAE,MADR;AAEEC,IAAAA,MAAM,EAAE,GAFV;AAGEC,IAAAA,GAAG,EAAE,EAHP;AAIEC,IAAAA,KAAK,EAAE;AAJT,GAPI;AALa,CAArB,C,CA6CA;AACA;;AACA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBV,YAAyB;AAAA,MAAXW,MAAW;;AAC7C,MAAIA,MAAM,CAACC,IAAP,KAAgBhB,gBAApB,EAAsC;AAClC,QAAMiB,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,KAAf,CAAX,CAAjB;AACAG,IAAAA,QAAQ,CAACZ,cAAT,GAA0BU,MAAM,CAACM,KAAjC;AACA,WAAOJ,QAAP,CAHkC,CAGjB;AAEjB;AACA;AACA;AACA;AACA;AACH;;AACD,MAAIF,MAAM,CAACC,IAAP,KAAgBf,iBAApB,EAAuC;AACnC,QAAMgB,SAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,KAAf,CAAX,CAAjB;;AACAG,IAAAA,SAAQ,CAACX,gBAAT,GAA4BS,MAAM,CAACM,KAAnC;AACA,WAAOJ,SAAP,CAHmC,CAGlB;AACpB;;AACD,MAAIF,MAAM,CAACC,IAAP,KAAgBd,cAApB,EAAoC;AAChC,QAAMe,UAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,KAAf,CAAX,CAAjB;;AACAG,IAAAA,UAAQ,CAACV,aAAT,GAAyBQ,MAAM,CAACM,KAAhC;AACA,WAAOJ,UAAP,CAHgC,CAGf;AACpB;;AACD,MAAIF,MAAM,CAACC,IAAP,KAAgBb,gBAApB,EAAsC;AAClC,QAAMc,UAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,KAAf,CAAX,CAAjB;;AACAG,IAAAA,UAAQ,CAACT,eAAT,GAA2BO,MAAM,CAACM,KAAlC;AACA,WAAOJ,UAAP,CAHkC,CAGjB;AAIpB,GA7B4C,CA+B/C;;;AACA,SAAOH,KAAP,CAhC+C,CAgCjC;AACf,CAjCD","sourcesContent":["import {INPUT_NAME_VALUE,INPUT_GENDER_ITEM,INPUT_AGE_ITEM,INPUT_HOBBY_ITEM} from \"./actionTypes\"\n\nconst defaultState = {\n  inputNameValue: \"\",\n  inputGenderValue: \"\",\n  inputAgeValue: \"\",\n  inputHobbyValue: \"\",\n  list: [\n    {\n      name: \"Jerry\",\n      gender: \"男\",\n      age: 20,\n      hobby: \"篮球\"\n    },\n    {\n      name: \"Neil\",\n      gender: \"男\",\n      age: 22,\n      hobby: \"跑步\"\n    },\n    // {\n    //   name: \"Della\",\n    //   gender: \"女\",\n    //   age: 19,\n    //   hobby: \"阅读\"\n    // },\n    // {\n    //   name: \"Abell\",\n    //   gender: \"男\",\n    //   age: 20,\n    //   hobby: \"旅游\"\n    // },\n    // {\n    //   name: \"Ada\",\n    //   gender: \"女\",\n    //   age: 20,\n    //   hobby: \"旅游\"\n    // },\n    // {\n    //   name: \"Sherry\",\n    //   gender: \"女\",\n    //   age: 20,\n    //   hobby: \"足球\"\n    // }\n  ]\n};\n\n//reducer能够接受state，但是绝不能修改state,所以需要拷贝成\n//纯函数指的是，给定固定的输入就一定会有固定的输出，而且不会有任何副作用\nexport default (state = defaultState, action) => {\n    if (action.type === INPUT_NAME_VALUE) {\n        const newState = JSON.parse(JSON.stringify(state));\n        newState.inputNameValue = action.value;\n        return newState; //newState实际返回给了store\n\n        // const newState = JSON.parse(JSON.stringify(state));\n        // newState.list.push(newState.inputNameValue );\n        // newState.inputNameValue =\"\";\n        // // console.log(newState)\n        // return newState;    //newState实际返回给了store\n    }\n    if (action.type === INPUT_GENDER_ITEM) {\n        const newState = JSON.parse(JSON.stringify(state));\n        newState.inputGenderValue = action.value;\n        return newState; //newState实际返回给了store\n    }\n    if (action.type === INPUT_AGE_ITEM) {\n        const newState = JSON.parse(JSON.stringify(state));\n        newState.inputAgeValue = action.value;\n        return newState; //newState实际返回给了store\n    }\n    if (action.type === INPUT_HOBBY_ITEM) {\n        const newState = JSON.parse(JSON.stringify(state));\n        newState.inputHobbyValue = action.value;\n        return newState; //newState实际返回给了store\n\n\n        \n    }\n\n  // console.log(state,action)\n  return state; //state里面存放的是所有store仓库里所有数据\n};\n"]},"metadata":{},"sourceType":"module"}